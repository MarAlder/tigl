// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSElementGeometry.h"
#include "CPACSParallelepiped.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSParallelepiped::CPACSParallelepiped(CPACSElementGeometry* parent)
        : m_a(0)
        , m_b(0)
        , m_c(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSParallelepiped::~CPACSParallelepiped()
    {
    }

    const CPACSElementGeometry* CPACSParallelepiped::GetParent() const
    {
        return m_parent;
    }

    CPACSElementGeometry* CPACSParallelepiped::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSParallelepiped::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSParallelepiped::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSParallelepiped::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element a
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/a")) {
            m_a = tixi::TixiGetElement<double>(tixiHandle, xpath + "/a");
        }
        else {
            LOG(ERROR) << "Required element a is missing at xpath " << xpath;
        }

        // read element b
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/b")) {
            m_b = tixi::TixiGetElement<double>(tixiHandle, xpath + "/b");
        }
        else {
            LOG(ERROR) << "Required element b is missing at xpath " << xpath;
        }

        // read element c
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/c")) {
            m_c = tixi::TixiGetElement<double>(tixiHandle, xpath + "/c");
        }
        else {
            LOG(ERROR) << "Required element c is missing at xpath " << xpath;
        }

        // read element alpha
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/alpha")) {
            m_alpha = tixi::TixiGetElement<double>(tixiHandle, xpath + "/alpha");
        }

        // read element beta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/beta")) {
            m_beta = tixi::TixiGetElement<double>(tixiHandle, xpath + "/beta");
        }

        // read element gamma
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/gamma")) {
            m_gamma = tixi::TixiGetElement<double>(tixiHandle, xpath + "/gamma");
        }

    }

    void CPACSParallelepiped::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element a
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/a");
        tixi::TixiSaveElement(tixiHandle, xpath + "/a", m_a);

        // write element b
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/b");
        tixi::TixiSaveElement(tixiHandle, xpath + "/b", m_b);

        // write element c
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/c");
        tixi::TixiSaveElement(tixiHandle, xpath + "/c", m_c);

        // write element alpha
        if (m_alpha) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/alpha");
            tixi::TixiSaveElement(tixiHandle, xpath + "/alpha", *m_alpha);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/alpha")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/alpha");
            }
        }

        // write element beta
        if (m_beta) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/beta");
            tixi::TixiSaveElement(tixiHandle, xpath + "/beta", *m_beta);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/beta")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/beta");
            }
        }

        // write element gamma
        if (m_gamma) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/gamma");
            tixi::TixiSaveElement(tixiHandle, xpath + "/gamma", *m_gamma);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/gamma")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/gamma");
            }
        }

    }

    const double& CPACSParallelepiped::GetA() const
    {
        return m_a;
    }

    void CPACSParallelepiped::SetA(const double& value)
    {
        m_a = value;
    }

    const double& CPACSParallelepiped::GetB() const
    {
        return m_b;
    }

    void CPACSParallelepiped::SetB(const double& value)
    {
        m_b = value;
    }

    const double& CPACSParallelepiped::GetC() const
    {
        return m_c;
    }

    void CPACSParallelepiped::SetC(const double& value)
    {
        m_c = value;
    }

    const boost::optional<double>& CPACSParallelepiped::GetAlpha() const
    {
        return m_alpha;
    }

    void CPACSParallelepiped::SetAlpha(const boost::optional<double>& value)
    {
        m_alpha = value;
    }

    const boost::optional<double>& CPACSParallelepiped::GetBeta() const
    {
        return m_beta;
    }

    void CPACSParallelepiped::SetBeta(const boost::optional<double>& value)
    {
        m_beta = value;
    }

    const boost::optional<double>& CPACSParallelepiped::GetGamma() const
    {
        return m_gamma;
    }

    void CPACSParallelepiped::SetGamma(const boost::optional<double>& value)
    {
        m_gamma = value;
    }

} // namespace generated
} // namespace tigl
